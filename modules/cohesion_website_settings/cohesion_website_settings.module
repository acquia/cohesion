<?php

/**
 * @file
 */

use Symfony\Component\Routing\Route;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\cohesion_website_settings\Entity\WebsiteSettings;
use Drupal\Core\Entity\RevisionableInterface;
use Drupal\Core\Cache\Cache;
use Drupal\cohesion\Entity\CohesionConfigEntityBase;

/**
 * Implements hook_help().
 */
function cohesion_website_settings_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the cohesion_website_settings module.
    case 'help.page.cohesion_website_settings':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('This module defines the website settings config entities.') . '</p>';
      $output .= '<p><ul>';
      $output .= '  <li>Website settings configuration entity and supporting forms.</li>';
      $output .= '  <li>Site Studio API integration.</li>';
      $output .= '</ul></p>';
      $output .= '<p><a href="https://sitestudiodocs.acquia.com/" target="_blank">https://sitestudiodocs.acquia.com/</a></p>';
      return $output;

    default:
  }
}

/**
 * Process a batch of settings to import.
 *
 * @param $element
 * @param $context
 */
function cohesion_website_settings_process_batch_import($element, &$context) {
  if (!isset($context['results']['error'])) {
    \Drupal::service('settings.endpoint.utils')->importAsset($element, $context);
  }
}

/**
 * Set up the batch import.
 *
 * @param $context
 */
function cohesion_website_settings_process_batch_import_start(&$context) {
  $running_dx8_batch = &drupal_static('running_dx8_batch');
  // Initial state.
  $running_dx8_batch = TRUE;

  // Copy the live stylesheet.json to temporary:// so styles don't get wiped when  re-importing.
  \Drupal::service('cohesion.local_files_manager')->liveToTemp();
}

/**
 * Batch settings import finished callback.
 *
 * @param $success
 * @param $results
 * @param $operations
 */
function cohesion_website_settings_batch_import_finished($success, $results, $operations) {
  $config_editable = \Drupal::configFactory()->getEditable('cohesion.settings');
  $config = \Drupal::config('cohesion.settings');

  if ($success && !isset($results['error'])) {
    $running_dx8_batch = &drupal_static('running_dx8_batch');
    $running_dx8_batch = TRUE;

    \Drupal::service('cohesion.local_files_manager')->tempToLive();
    \Drupal::messenger()->addMessage(t('Account settings have been saved.'));
    \Drupal::messenger()->addMessage(t('Site Studio is installed and up to date.'));
    if ($config->get('api_key') && !$config->get('asset_is_imported')) {
      $config_editable->set('asset_is_imported', TRUE);
      $config_editable->save();
    }
  }
  elseif (isset($results['error'])) {
    \Drupal::messenger()->addError($results['error']);
  }

  $cohesion_routes = \Drupal::service('cohesion.utils')->getCohesionRoutes();
  // Allow access to cohesion menu items.
  foreach ($cohesion_routes as $route) {
    if (($route instanceof Route) && $config->get('api_key') && $config->get('asset_is_imported')) {
      $route->setRequirement('_access', 'TRUE');
    }
  }
  \Drupal::service('router.builder')->rebuild();
  Cache::invalidateTags(['dx8-form-data-tag']);

  // Clear the js/css cache to update the cachebuster.
  $module_handler = \Drupal::moduleHandler();
  $module_handler->invokeAll('cache_flush');
  foreach (Cache::getBins() as $service_id => $cache_backend) {
    $cache_backend->deleteAll();
  }

  \Drupal::service('asset.css.collection_optimizer')->deleteAll();
  \Drupal::service('asset.js.collection_optimizer')->deleteAll();
  _drupal_flush_css_js();
  drupal_static_reset();
}

/**
 * Resaves a config entity as part of a batch functions (including drush dx8
 * rebuild).
 *
 * @param $entity CohesionConfigEntityBase
 * @param bool $realsave
 * @param bool $verbose
 * @param array $context
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function _resave_entity($entity, $realsave = FALSE, $verbose = FALSE, &$context = []) {
  if ($entity) {
    $time_start = microtime(TRUE);

    // Ignore base styles that have not been created.
    if (isset($context['results']['error']) || ($entity->getEntityTypeId() === 'cohesion_base_styles' && !$entity->get('modified'))) {
      return;
    }

    $running_dx8_batch = &drupal_static('running_dx8_batch');
    // Initial state.
    $running_dx8_batch = TRUE;

    // Save the entity.
    if ($entity instanceof CohesionConfigEntityBase) {

      // Rebuild the Usage.
      \Drupal::service('cohesion_usage.update_manager')->buildRequires($entity);

      // Perform the Send to API.
      try {
        $send_to_api = $entity->process();
        if ($send_to_api) {
          // Get response from the API.
          $data = $send_to_api->getData();
          if (isset($data['error'])) {
            $context['results']['error'] = $data['error'];
          }
        }
      } catch (\Throwable $e) {
        $context['results']['error'] = $e->getMessage();
      }

      if ($realsave) {
        $entity->save();
      }
    }

    // Set batch message,
    if ($verbose) {
      $context['message'] = t('Building @entity_type_id - @label - @entity_id (@time seconds, @memory MB (total), @memory_peak MB (peak))', [
        '@entity_type_id' => $entity->getEntityTypeId(),
        '@label' => $entity->label(),
        '@entity_id' => $entity->id(),
        '@time' => number_format((float) microtime(TRUE) - $time_start, 2, '.', ''),
        '@memory' => number_format(memory_get_usage() / 1024768, 2, '.', ','),
        '@memory_peak' => number_format(memory_get_peak_usage() / 1024768, 2, '.', ',')
      ]);
    }
    else {
      $context['message'] = t('Building @entity_type_id - @label - @entity_id', [
        '@entity_type_id' => $entity->getEntityTypeId(),
        '@label' => $entity->label(),
        '@entity_id' => $entity->id()
      ]);
    }
  }
}

function _resave_config_entity($entity_ids, $entity_type, $verbose = FALSE, &$context = []) {
  $entity_update_manager = \Drupal::service('cohesion.entity_update_manager');
  $entity_list = \Drupal::entityTypeManager()->getStorage($entity_type)->loadMultiple($entity_ids);
  foreach ($entity_list as $entity) {
    _resave_entity($entity, $entity_update_manager->entityNeedUpdate($entity), $verbose, $context);
  }
}

/**
 * @param $forms
 * @param bool $verbose
 * @param array $context
 */
function _cohesion_style_save($forms, $verbose = FALSE, &$context = []) {
  $time_start = microtime(TRUE);

  $running_dx8_batch = &drupal_static('running_dx8_batch');
  $running_dx8_batch = TRUE;
  /** @var \Drupal\cohesion\StylesApi $send_to_api */
  $send_to_api = \Drupal::service('plugin.manager.api.processor')->createInstance('styles_api');
  $send_to_api->setForms($forms);
  try {
    $send_to_api->send();

    // Get response from the API.
    $data = $send_to_api->getData();
    if (isset($data['error'])) {
      $context['results']['error'] = $data['error'];
    }
  } catch (\Exception $e) {
    $context['results']['error'] = $e->getMessage();
  }

  // Set batch message.
  if ($verbose) {
    $context['message'] = t('Rebuilding all styles (@time seconds, @memory MB (total) @memory_peak MB (peak))', [
      '@time' => number_format((float) microtime(TRUE) - $time_start, 2, '.', ''),
      '@memory' => number_format(memory_get_usage() / 1024768, 2, '.', ','),
      '@memory_peak' => number_format(memory_get_peak_usage() / 1024768, 2, '.', ',')
    ]);
  }
  else {
    $context['message'] = t('Rebuilding all styles');
  }

}

function _cohesion_styles_bulk_save($ids, $entity_type, $verbose = FALSE, &$context = []) {
  $entity_update_manager = \Drupal::service('cohesion.entity_update_manager');
  $forms = [];
  foreach ($ids as $entity_id) {
    $entity = \Drupal::entityTypeManager()->getStorage($entity_type)->load($entity_id);
    $entity_update_manager->entityNeedUpdate($entity);
    if($entity && $entity->status()) {
        $api_plugin = $entity->getApiPluginInstance();
        $api_plugin->setEntity($entity);
        $forms = array_merge($api_plugin->getForms(), $forms);
        unset($api_plugin);
    }
  }

  _cohesion_style_save($forms, $verbose, $context);
}

/**
 * @param $entity
 * @param $context
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function _resave_content_entity($entity, &$context) {
  if (isset($context['results']['error'])) {
    return;
  }

  $running_dx8_batch = &drupal_static('running_dx8_batch');
  // Initial state.
  $running_dx8_batch = TRUE;
  // Save the entity.
  $context['message'] = t('Rebuilding content entities.');

  if ($entity instanceof RevisionableInterface && $entity->getRevisionId()) {
    $entity->setNewRevision(FALSE);
  }
  $entity->save();
  cohesion_entity_update($entity);
}

/**
 * Resaves a cohesion layout entity as part of a batch functions (including
 * drush dx8 rebuild).
 *
 * @param $ids
 * @param $verbose
 * @param $context
 */
function _resave_cohesion_layout_entity($ids, $verbose = FALSE, &$context = []) {
  if (!isset($context['results']['error'])) {
    $time_start = microtime(TRUE);

  $running_dx8_batch = &drupal_static('running_dx8_batch');
  // Initial state.
  $running_dx8_batch = TRUE;
  // Save the entity.
  $context['message'] = t('Rebuilding content entities.');
  $entity_data = \Drupal::service('entity_type.manager')->getStorage('cohesion_layout');

    if ($entity_data && ($entities = $entity_data->loadMultiple($ids))) {
      /** @var \Drupal\cohesion_elements\Entity\CohesionLayout $entity */
      foreach ($entities as $entity) {
        if (!isset($context['results']['error'])) {
          // Rebuild the Usage.
          $parent_entity_type_id = 'unknown';
          $parent_entity_label = 'unknown';
          $parent_entity_id = 'unknown';

          if ($parent_entity = $entity->getParentEntity()) {
            $parent_entity_type_id = $parent_entity->getEntityTypeId();
            $parent_entity_label = $parent_entity->label();
            $parent_entity_id = $parent_entity->id();
            \Drupal::service('cohesion_usage.update_manager')->buildRequires($entity);
          }

          // Re-save the entity.
          if ($entity instanceof RevisionableInterface && $entity->getRevisionId()) {
            $entity->setNewRevision(FALSE);
          }
          $entity->save();
          $cohesion_error = &drupal_static('entity_cohesion_error');
          if ($cohesion_error) {
            $context['results']['error'] = $cohesion_error;
          }

          // Batch message.
          if ($verbose) {
            $context['message'] = t('Building @entity_type_id - @label - @entity_id (@time seconds, @memory MB (total) @memory_peak MB (peak))', [
              '@entity_type_id' => $parent_entity_type_id,
              '@label' => $parent_entity_label,
              '@entity_id' => $parent_entity_id,
              '@time' => number_format((float) microtime(TRUE) - $time_start, 2, '.', ''),
              '@memory' => number_format(memory_get_usage() / 1024768, 2, '.', ','),
              '@memory_peak' => number_format(memory_get_peak_usage() / 1024768, 2, '.', ',')
            ]);
          }
          else {
            $context['message'] = t('Building @entity_type_id - @label - @entity_id', [
              '@entity_type_id' => $parent_entity_type_id,
              '@label' => $parent_entity_label,
              '@entity_id' => $parent_entity_id
            ]);
          }
        }
      }
    }
  }

}

/**
 * Rebuilds the view entities usage.
 *
 * @param $context
 */
function _rebuild_views_usage(&$context) {
  if (isset($context['results']['error'])) {
    return;
  }

  $context['message'] = t('Rebuild view entities usage.');
  \Drupal::service('cohesion_usage.update_manager')->rebuildEntityType('view');
}

/**
 * Implements hook_theme().
 */
function cohesion_website_settings_theme() {
  return [
    'cohesion_website_settings' => [
      'template' => 'cohesion_website_settings',
      'render element' => 'children',
    ],
  ];
}

/**
 * Process a batch of settings to import.
 *
 * @param $element
 * @param $context
 */
function cohesion_website_settings_process_batch(&$context) {
  if (!isset($context['results']['error'])) {
    $context['message'] = t('Importing Website Settings entities');
    \Drupal::service('website_settings.defaults')->importEntities();
  }
}

/**
 * @param $entities
 * @param $context
 */
function cohesion_website_settings_enable_website_settings($entities, &$context) {
  if (!isset($context['results']['error'])) {
    $context['message'] = t('Enabling Website Settings entities');

    $errors = [];
    if ($entities) {
      foreach ($entities as $id) {
        $running_dx8_batch = &drupal_static('running_dx8_batch');
        // Initial state.
        $running_dx8_batch = TRUE;

        // Attempt to load existing website settings entity.
        if (($ws_entity = WebsiteSettings::load($id)) && $ws_entity->isModified()) {
          continue;
        }
        else {
          // It doesn't exist, so create defaults.
          if (($errors = \Drupal::service('website_settings.defaults')->createDefaultWebsiteSettings($id))) {
            // Immediately break if there is an error.
            break;
          }
        }
      }
    }

    if ($errors) {
      $context['results']['error'] = $errors['error'];
    }
  }
}
