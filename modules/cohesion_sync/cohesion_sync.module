<?php

/**
 * @file
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\cohesion\Entity\CohesionSettingsInterface;
use Drupal\Core\Url;
use Symfony\Component\Yaml\Yaml;
use Drupal\cohesion_sync\Config\CohesionFileStorage;
use Drupal\cohesion_sync\Config\CohesionStorageComparer;
use Drupal\config\StorageReplaceDataWrapper;
use Drupal\Core\Config\Importer\ConfigImporterBatch;
use Drupal\cohesion_sync\Controller\BatchImportController;
use Drupal\Core\Config\ConfigImporter;

define('COHESION_SYNC_DEFAULT_DIR', COHESION_FILESYSTEM_URI . 'sync');
define('COHESION_SYNC_DEFAULT_MODULE_PACKAGES', '/config/site_studio/site_studio.packages.yml');

/**
 * Implements hook_entity_operation_alter().
 */
function cohesion_sync_entity_operation_alter(array &$operations, EntityInterface $entity) {
  if ($entity instanceof CohesionSettingsInterface) {
    // Add "Export package to YML file." and "Lock entity" option to the actions dropdown on all Site Studio entity list builders.
    if (Drupal::currentUser()->hasPermission('access cohesion sync') && $entity->get('status')) {
      $url = Url::fromRoute('cohesion_sync.operation_export_single', [
        'entity_type' => $entity->getEntityTypeId(),
        'entity_uuid' => $entity->uuid(),
      ]);

      $url->setOption('query', [
        'destination' => \Drupal::request()->getRequestUri(),
      ]);

      $operations['export_package_to_file'] = [
        'title' => t('Export package to .tar.gz file'),
        'url' => Url::fromRoute('cohesion_sync.export.export_single_entity_package', [
          'entity_type' => $entity->getEntityTypeId(),
          'entity_uuid' => $entity->uuid(),
        ]),
        'weight' => 49,
      ];

      $operations['legacy_export_package_to_file'] = [
        'title' => t('Export package to YML file'),
        'url' => $url,
        'weight' => 50,
      ];

      $operations['toggle_lock_for_sync'] = [
        'title' => !$entity->isLocked() ? t('Lock entity') : t('Unlock entity'),
        'url' => Url::fromRoute('cohesion_sync.entity_lock_toggle', [
          'entity_type' => $entity->getEntityTypeId(),
          'entity_uuid' => $entity->uuid(),
        ]),
        'weight' => 60,
      ];

    }
  }
}

/**
 * Implements hook_modules_installed().
 */
function cohesion_sync_modules_installed($modules) {
  // Do not attempt importing package if Site Studio settings are not initialised.
  if (\Drupal::getContainer()->has('cohesion.utils') && \Drupal::service('cohesion.utils')->usedx8Status() === FALSE) {
    return;
  }

  foreach ($modules as $module) {
    // Check to see if the config/dx8/packages.yml file exists.
    $packages_yaml_file = drupal_get_path('module', $module) . "/config/dx8/packages.yml";
    if (file_exists($packages_yaml_file)) {
      // Decode the file.
      $config = Yaml::parse(file_get_contents($packages_yaml_file));

      if (is_array($config)) {
        // Loop through the packages and deploy them.
        foreach ($config as $path) {
          // If it's a local path, patch in the path to the module.
          if (file_exists(drupal_get_path('module', $module) . '/' . $path)) {
            $path = drupal_get_path('module', $module) . '/' . $path;
          }

          // Attempt to deploy the package.
          try {
            $operations = \Drupal::service('cohesion_sync.drush_helpers')->import(TRUE, FALSE, $path);

            $batch = [
              'title' => t('Importing configuration.'),
              'operations' => $operations,
              'progressive' => FALSE,
            ];

            batch_set($batch);

          }
          catch (\Exception $e) {
            // Tell dblog what happened.
            Drupal::logger('cohesion')->error($e->getMessage());
          }
        }
      }
    }

    // Import config and files from module directory
    /** @var \Drupal\Core\File\FileSystemInterface $file_system */
    $file_system = \Drupal::service('file_system');
    $package_list_path = drupal_get_path('module', $module) . COHESION_SYNC_DEFAULT_MODULE_PACKAGES;
    $package_list = [];
    if (file_exists($package_list_path)) {
      $package_list = Yaml::parse(file_get_contents($package_list_path));
    }
    $package_source_manager = \Drupal::service('cohesion_sync.package_source_manager');

    $packages = [];
    if (!empty($package_list)) {
      foreach ($package_list as $package_entry) {
        if (isset($package_entry['type']) && isset($package_entry['source'])) {
          $sourceService = $package_source_manager->getSourceService($package_entry['type']);
          $packages[] = $sourceService->preparePackage($package_entry['source']);
          if (isset($package_entry['options']['extra-validation']) && $package_entry['options']['extra-validation']) {
            $cohesion_sync_import_options = &drupal_static('cohesion_sync_import_options');
            $cohesion_sync_import_options['extra-validation'] = TRUE;
          }
        }
      }
    }
    if (empty($packages)) {
      continue;
    }

    $eventDispatcher = \Drupal::service('event_dispatcher');
    $configManager = \Drupal::service('config.manager');
    $lock = \Drupal::service('lock.persistent');
    $typedConfigManager = \Drupal::service('config.typed');
    $moduleHandler = \Drupal::service('module_handler');
    $moduleInstaller = \Drupal::service('module_installer');
    $themeHandler = \Drupal::service('theme_handler');
    $getStringTranslation = \Drupal::service('string_translation');
    $moduleExtensionList = \Drupal::service('extension.list.module');
    $active_storage = \Drupal::service('config.storage');
    $replacement_storage = new StorageReplaceDataWrapper($active_storage);

    $file_operations = [];
    foreach ($packages as $package) {
      if (isset($package) && is_dir($package) && !empty($file_system->scanDirectory($package, '/.*/'))) {
        $source_storage = new CohesionFileStorage($package);

        foreach ($source_storage->listAll() as $name) {
          $data = $source_storage->read($name);
          $replacement_storage->replaceData($name, $data);
        }
        $file_operations[] = [[BatchImportController::class, 'fileImport'], [$source_storage, $package]];

      }
    }

    $usage_update_manager = \Drupal::service('cohesion_usage.update_manager');
    $storage_comparer = new CohesionStorageComparer($replacement_storage, $active_storage, $usage_update_manager);

    $batch = [
      'operations' => $file_operations,
      'finished' => [BatchImportController::class, 'finish'],
      'title' => t('Synchronizing configuration'),
      'init_message' => t('Starting configuration synchronization.'),
      'progress_message' => t('Completed step @current of @total.'),
      'error_message' => t('Configuration synchronization has encountered an error.'),
    ];

    if($storage_comparer->createChangelist()->hasChanges()) {

      // For each config to be deleted, retain everywhere it is used in order to rebuild the in use system.
      // This is to make sure the in use table is up to date after delete or replacement with a new UUID
      $in_use_to_rebuild = $storage_comparer->getInuseDelete();

      $config_importer = new ConfigImporter(
        $storage_comparer,
        $eventDispatcher,
        $configManager,
        $lock,
        $typedConfigManager,
        $moduleHandler,
        $moduleInstaller,
        $themeHandler,
        $getStringTranslation,
        $moduleExtensionList
      );

      $sync_steps = $config_importer->initialize();
      foreach ($sync_steps as $sync_step) {
        $batch['operations'][] = [[ConfigImporterBatch::class, 'process'], [$config_importer, $sync_step]];
      }
      $batch['operations'][] = [[BatchImportController::class, 'handleRebuilds'], [$storage_comparer]];
      if(!empty($in_use_to_rebuild)) {
        $batch['operations'][] = [[BatchImportController::class, 'handleInuse'], [$in_use_to_rebuild]];
      }

    }
    batch_set($batch);
  }
}

/**
 * Implements hook_page_attachments_alter().
 */
function cohesion_sync_page_attachments_alter(array &$attachments) {
  // Only attach for the sync import route.
  $route = \Drupal::routeMatch()->getRouteName();
  if ($route === 'cohesion_sync.import') {
    // Attach sync file chunk that can be used in module file-js.
    $attachments['#attached']['drupalSettings']['cohesion']['urls']['sync_file_chunk'] = Url::fromRoute('cohesion_sync.chunked')
      ->toString();
  }

  // Only attach for sync react app package add & edit forms.
  if (in_array($route, ['entity.cohesion_sync_package.add_form', 'entity.cohesion_sync_package.edit_form'])) {
    $attachments['#attached']['drupalSettings']['cohesion']['urls']['sync_refresh'] = Url::fromRoute('cohesion_sync.refresh')->toString();
  }
}
