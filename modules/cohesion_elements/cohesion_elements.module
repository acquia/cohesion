<?php

/**
 * @file
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\field\FieldStorageConfigInterface;
use Drupal\Core\Render\Element;
use Drupal\cohesion_elements\Entity\ComponentContent;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\TranslatableRevisionableStorageInterface;

define('COHESION_ELEMENTS_COHESION_COMPONENT_SETTINGS_TRAY_WIDTH', 770);
define('COHESION_ELEMENTS_COHESION_COMPONENT_CATEGORY_COUNT', 15);

/**
 * Implements hook_help().
 */
function cohesion_elements_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the cohesion_custom_styles module.
    case 'help.page.cohesion_elements':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('This module defines the component and helper config entities for creating reusable design patterns within Site Studio.') . '</p>';
      $output .= '<p><ul>';
      $output .= '  <li>Component configuration entity and supporting forms.</li>';
      $output .= '  <li>Template helper configuration entity and supporting forms.</li>';
      $output .= '  <li>Site Studio API integration.</li>';
      $output .= '  <li>Custom Views query plugin for listing components and helpers.</li>';
      $output .= '  <li>Layout field plugin for adding Site Studio layouts to fieldable entities.</li>';
      $output .= '</ul></p>';
      $output .= '<p><a href="https://sitestudiodocs.acquia.com/" target="_blank">https://sitestudiodocs.acquia.com/</a></p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_library_info_alter().
 */
function cohesion_elements_library_info_alter(&$libraries, $extension) {
  global $base_url;

  if ($extension == 'cohesion') {
    // Path is relative to Drupal root if begins with '/'.
    // Otherwise relative from module/theme root.
    if ($cohesion_asset_libraries = Drupal::keyValue('cohesion.elements.asset.libraries')->getAll()) {
      foreach ($cohesion_asset_libraries as $library_key => $library_info) {

        $libraries[$library_key] = [];

        // Add the js assets to the library.
        if (isset($library_info['js'])) {
          foreach ($library_info['js'] as $library) {
            $url = file_create_url($library['asset_url']);
            $asset_url = (isset($url) && (strpos($url, $base_url) !== FALSE)) ? str_replace($base_url, '', $url) : $url;
            // Replace StreamWrapper with its base path for translation. see _locale_parse_js_file in locale.module.
            $library['asset_url'] = $asset_url;
            $libraries[$library_key]['js'][$library['asset_url']] = [
              'weight' => (isset($library['weight']) && $library['weight'] < 0) ? $library['weight'] : 0,
              'minified' => isset($library['minified']) ? $library['minified'] : FALSE,
            ];
          }
        }

        // Add the css assets to the library.
        if (isset($library_info['css'])) {
          foreach ($library_info['css'] as $library) {
            $weight = isset($library['weight']) ? $library['weight'] : 'theme';

            $libraries[$library_key]['css'][$weight][$library['asset_url']] = [
              'minified' => isset($library['minified']) ? $library['minified'] : FALSE,
            ];
          }
        }

        // Add any library dependencies.
        if (isset($library_info['dependencies'])) {
          foreach ($library_info['dependencies'] as $dependency) {
            $libraries[$library_key]['dependencies'][] = $dependency;
          }
        }

        // Check for incomplete definition.
        if (is_array($libraries[$library_key]) && count($libraries[$library_key]) == 0) {
          unset($libraries[$library_key]);
        }
      }
    }
  }
}

/**
 * Copy parent context to current context (for tokens).
 *
 * @param $variables
 */
function preprocess_cohesion_elements_component(&$variables) {
  foreach ($variables['parentContext'] as $key => $value) {
    if ($key !== 'componentFieldsValues' && $key !== 'template' && !$value instanceof Attribute) {
      $variables[$key] = $value;
    }
  }

}

/**
 * Preprocess the component preview iframe page.html.twig
 * See: templates/page--cohesionapi--component--preview.html.twig.
 *
 * @param $variables
 */
function preprocess_cohesion_preview_page(&$variables) {
  // Load the build created in CohesionComponentController::preview.
  $variables['preview_build'] = &drupal_static('component_preview_build');
}

/**
 * Implements hook_theme().
 */
function cohesion_elements_theme($existing, $type, $theme, $path) {
  return [
    'cohesion_layout' => [
      'render element' => 'element',
    ],
    'field__component_content__layout_canvas' => [
      'template' => 'component-content-field',
      'base hook' => 'field',
    ],
    'component' => [
      'template' => 'cohesion-component-template',
      'render element' => 'children',
      'variables' => [
        'content' => '',
        'parentContext' => [],
        'parentIsComponent' => FALSE,
        'componentFieldsValues' => [],
        'componentUuid' => '',
        'template' => '',
      ],
      'preprocess functions' => [
        'preprocess_cohesion_elements_component',
        'contextual_preprocess',
      ],
    ],
    'component_preview_full' => [
      'template' => 'canvas-preview-full',
      'base hook' => 'page',
    ],
    'page__cohesionapi__component__preview' => [
      'template' => 'page--cohesionapi--component--preview',
      'base hook' => 'page',
      'preprocess functions' => [
        'preprocess_cohesion_preview_page',
      ],
    ],
    'form_color_class_radios' => [
      'render element' => 'element',
    ],
  ];
}

/**
 * Process a batch to import the styles of all used elements.
 *
 * @param bool $verbose
 * @param $context
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function cohesion_elements_get_elements_style_process_batch($verbose = FALSE, &$context = []) {
  $time_start = microtime(TRUE);

  if (isset($context['results']['error'])) {
    return;
  }

  $running_dx8_batch = &drupal_static('running_dx8_batch');
  // Initial state.
  $running_dx8_batch = TRUE;

  /** @var \Drupal\cohesion_elements\Plugin\Api\ElementsApi $send_to_api */
  $send_to_api = cohesion_elements_get_elements_style_process($context);

  $data = $send_to_api->getData();
  if (isset($data['error'])) {
    $context['results']['error'] = $data['error'];
  }

  // Set batch message.
  if ($verbose) {
    $context['message'] = t('Importing styles for elements (@time seconds, @memory MB)', [
      '@time' => number_format((float) microtime(TRUE) - $time_start, 2, '.', ''),
      '@memory' => number_format(memory_get_usage() / 1024768, 2, '.', ',')
    ]);
  }
  else {
    $context['message'] = t('Importing styles for elements');
  }

}

/**
 * Process to import the styles of all used elements.
 *
 * @param $context
 *
 * @return \Drupal\cohesion_elements\Plugin\Api\ElementsApi
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function cohesion_elements_get_elements_style_process(&$context = []) {

  /** @var \Drupal\cohesion_elements\Plugin\Api\ElementsApi $send_to_api */
  $send_to_api = \Drupal::service('plugin.manager.api.processor')->createInstance('elements_api');
  $send_to_api->send();

  return $send_to_api;
}

/**
 * Implements hook_page_attachments().
 */
function cohesion_elements_page_attachments(array &$attachments) {

  // Restrict access to certain component types depending on the route.
  $route_name = \Drupal::routeMatch()->getRouteName();
  $allowed_pages = [
    'entity.cohesion_master_templates.edit_form',
    'entity.cohesion_content_templates.edit_form',
    'entity.cohesion_view_templates.edit_form',
    'entity.cohesion_menu_templates.edit_form',
  ];

  if (in_array($route_name, $allowed_pages)) {
    $attachments['#attached']['drupalSettings']['cohesion']['restrictedComponents'] = [
      'entity_type_access' => 'dx8_templates',
      'bundle_access' => 'dx8_templates',
    ];
  }

  // If the user has contextual links enabled, attach the component settings
  // tray overrides.
  if (\Drupal::currentUser()->hasPermission('access contextual links') && \Drupal::currentUser()->hasPermission('access components') && $route_name != 'cohesion_elements.component.preview') {
    $attachments['#attached']['library'][] = 'cohesion_elements/settings-tray';
  }
}

/**
 * @inheritdoc
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function cohesion_elements_theme_suggestions_component_alter(array &$suggestions, array &$variables) {
  if(isset($variables['template'])) {
    $suggestions[] = $variables['template'] . '__' . \Drupal::service('theme.manager')->getActiveTheme()->getName();
  }
}

/**
 * Implements hook_module_implements_alter().
 *
 * Our cohesion_elements_form_language_content_settings_form_alter() needs to be run after
 * that of the content_translation module in order to see the current state
 * of the translation field.
 *
 * The hook here can't be more specific, as the $hook that's passed in to this
 * function is form_alter, and not form_FORM_ID_alter.
 */
function cohesion_elements_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter' && isset($implementations['cohesion_elements'])) {
    $group = $implementations['cohesion_elements'];
    unset($implementations['cohesion_elements']);
    $implementations['cohesion_elements'] = $group;
  }
}

/**
 * Implements hook_preprocess_HOOK() for field templates.
 */
function cohesion_elements_preprocess_field(&$variables) {
  $element = $variables['element'];
  /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
  $entity = $element['#object'];

  if ($entity instanceof ComponentContent && isset($variables['attributes']) && isset($variables['attributes']['data-quickedit-field-id'])) {
    unset($variables['attributes']['data-quickedit-field-id']);
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function cohesion_elements_theme_registry_alter(&$theme_registry) {

  if (isset($theme_registry['field']['preprocess functions'])) {
    foreach ($theme_registry['field']['preprocess functions'] as $key => $value) {
      if ($value == 'cohesion_elements_preprocess_field') {
        unset($theme_registry['field']['preprocess functions'][$key]);
        $theme_registry['field']['preprocess functions'][] = 'cohesion_elements_preprocess_field';
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Indicate unsupported multilingual paragraphs field configuration.
 *
 * Add a warning that paragraph fields can not be translated.
 * Switch to error if a paragraph field is marked as translatable.
 */
function cohesion_elements_form_language_content_settings_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Without it Paragraphs message are meaningless.
  if (!\Drupal::hasService('content_translation.manager')) {
    return;
  }

  $content_translation_manager = \Drupal::service('content_translation.manager');
  $message_display = 'warning';
  $message_text = t('(* unsupported) Layout canvas fields do not support translation.');
  $map = \Drupal::service('entity_field.manager')->getFieldMapByFieldType('entity_reference_revisions');
  foreach ($map as $entity_type_id => $info) {
    if (!$content_translation_manager->isEnabled($entity_type_id)) {
      continue;
    }
    $field_storage_definitions = \Drupal::service('entity_field.manager')->getFieldStorageDefinitions($entity_type_id);

    /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface $storage_definition */
    foreach ($field_storage_definitions as $name => $storage_definition) {
      if ($storage_definition->getSetting('target_type') && $storage_definition->getSetting('target_type') == 'cohesion_layout') {

        // For configurable fields, check all bundles on which the field exists,
        // for base fields that are translable, check all bundles,
        // untranslatable base fields do not show up at all.
        $bundles = [];
        if ($storage_definition instanceof FieldStorageConfigInterface) {
          $bundles = $storage_definition->getBundles();
        }
        elseif ($storage_definition->isTranslatable()) {
          $bundles = Element::children($form['settings'][$entity_type_id]);
        }
        foreach ($bundles as $bundle) {
          if (!$content_translation_manager->isEnabled($entity_type_id, $bundle)) {
            continue;
          }

          // Update the label and if the paragraph field is translatable,
          // display an error message instead of just a warning.
          if (isset($form['settings'][$entity_type_id][$bundle]['fields'][$name]['#label'])) {
            $form['settings'][$entity_type_id][$bundle]['fields'][$name]['#label'] = t('@field_label (* unsupported)', ['@field_label' => $form['settings'][$entity_type_id][$bundle]['fields'][$name]['#label']]);
          }
          if (!empty($form['settings'][$entity_type_id][$bundle]['fields'][$name]['#default_value'])) {
            $message_display = 'error';
          }

        }
      }
    }
  }

  // Update the description on the hide untranslatable fields checkbox.
  if (isset($form['settings']['cohesion_layout'])) {
    $cohesion_layout_untranslatable_hide_description = t('Layout canvas that are used in moderated content requires non-translatable fields to be edited in the original language form and this must be checked.');
    foreach (Element::children($form['settings']['cohesion_layout']) as $bundle) {
      if (!empty($form['settings']['cohesion_layout'][$bundle]['settings']['content_translation']['untranslatable_fields_hide'])) {
        $form['settings']['cohesion_layout'][$bundle]['settings']['content_translation']['untranslatable_fields_hide']['#description'] = $cohesion_layout_untranslatable_hide_description;
      }
    }
  }

  $form['settings']['layout_canvas_message'] = [
    '#type' => 'container',
    '#markup' => $message_text,
    '#attributes' => [
      'class' => ['messages messages--' . $message_display],
    ],
    '#weight' => 0,
  ];
}

/**
 * Implements hook_form_FORM_ID_alter() for 'field_ui_field_storage_add_form'.
 */
function cohesion_elements_form_field_ui_field_storage_add_form_alter(array &$form) {
  unset($form['add']['new_storage_type']['#options'][(string) t('Site Studio')]['cohesion_entity_reference_revisions']);
  unset($form['add']['new_storage_type']['#options'][(string) t('Reference revisions')]['field_ui:entity_reference_revisions:cohesion_layout']);
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for \Drupal\node\NodeForm.
 *
 * Changes vertical tabs to container.
 */
function cohesion_elements_form_component_content_edit_form_alter(&$form, FormStateInterface $form_state) {

  $theme = \Drupal::theme()->getActiveTheme()->getName();

  if ($theme == 'seven') {
    $form['#theme'] = ['node_edit_form'];
    $form['#attached']['library'][] = 'seven/node-form';

    $form['advanced']['#type'] = 'container';
    $form['meta']['#type'] = 'container';
    $form['meta']['#access'] = TRUE;
    $form['meta']['changed']['#wrapper_attributes']['class'][] = 'container-inline';
    $form['meta']['author']['#wrapper_attributes']['class'][] = 'container-inline';

    $form['revision_information']['#type'] = 'container';
    $form['revision_information']['#group'] = 'meta';
  }
}

/**
 * Implements hook_preprocess_image_widget().
 */
function cohesion_elements_preprocess_image_widget(&$variables) {
  $element = $variables['element'];
  $required_classes = ['image-widget', 'js-form-managed-file', 'form-managed-file', 'clearfix'];
  foreach ($required_classes as $class) {
    if (!in_array($class, $variables['attributes']['class'])) {
      $variables['attributes']['class'][] = $class;
    }
  }
  if (isset($element['preview']['indicator']['#attributes']['data-selector'])) {
    if (strpos($element['preview']['indicator']['#attributes']['data-selector'], "focal-point") === 0) {
      $focal_point = TRUE;
    }
  }

  if (!empty($element['fids']['#value']) && !isset($focal_point)) {
    $file = reset($element['#files']);
    $element['file_' . $file->id()]['filename']['#suffix'] = ' <span class="file-size">(' . format_size($file->getSize()) . ')</span> ';
    $file_variables = [
      'style_name' => $element['#preview_image_style'],
      'uri' => $file->getFileUri(),
    ];

    // Determine image dimensions.
    if (isset($element['#value']['width']) && isset($element['#value']['height'])) {
      $file_variables['width'] = $element['#value']['width'];
      $file_variables['height'] = $element['#value']['height'];
    }
    else {
      $image = \Drupal::service('image.factory')->get($file->getFileUri());
      if ($image->isValid()) {
        $file_variables['width'] = $image->getWidth();
        $file_variables['height'] = $image->getHeight();
      }
      else {
        $file_variables['width'] = $file_variables['height'] = NULL;
      }
    }

    $element['preview'] = [
      '#weight' => -10,
      '#theme' => 'image_style',
      '#width' => $file_variables['width'],
      '#height' => $file_variables['height'],
      '#style_name' => $file_variables['style_name'],
      '#uri' => $file_variables['uri'],
    ];

    // Store the dimensions in the form so the file doesn't have to be
    // accessed again. This is important for remote files.
    $element['width'] = [
      '#type' => 'hidden',
      '#value' => $file_variables['width'],
    ];
    $element['height'] = [
      '#type' => 'hidden',
      '#value' => $file_variables['height'],
    ];
  }

  $variables['data'] = [];
  foreach (Element::children($element) as $child) {
    $variables['data'][$child] = $element[$child];
  }
}

/**
 * Implements hook_menu_local_actions_alter().
 */
function cohesion_elements_menu_local_actions_alter(&$local_actions) {

  $action_routes = [
    'entity.cohesion_component.toggle_components_groups',
    'entity.cohesion_helper.toggle_helpers_groups',
    'entity.component_content.toggle_component_content_groups'
  ];

  foreach($action_routes as $action_route) {
    // Add class to component admin link actions.
    if (isset($local_actions[$action_route])) {
      $local_actions[$action_route]['options']['attributes']['class'][] = 'coh-toggle-accordion';
      $local_actions[$action_route]['options']['attributes']['class'][] = 'open';
      $local_actions[$action_route]['options']['attributes']['role'][] = 'button';
    }
  }
}

/**
 * Implements hook_entity_revision_create().
 */
function cohesion_elements_entity_revision_create(ContentEntityInterface $new_revision, ContentEntityInterface $entity, $keep_untranslatable_fields) {
  $entity_type_manager = \Drupal::entityTypeManager();
  $storage = \Drupal::entityTypeManager()->getStorage($entity->getEntityTypeId());
  foreach ($entity->getFieldDefinitions() as $field_name => $field_definition) {
    if ($field_definition->getType() == 'cohesion_entity_reference_revisions' && !$field_definition->isTranslatable()) {
      $target_entity_type_id = $field_definition->getSetting('target_type');
      if ($entity_type_manager->getDefinition($target_entity_type_id)->get('entity_revision_parent_id_field')) {

        // The default implementation copied the values from the current
        // default revision into the field since it is not translatable.
        // Take the originally referenced entity, create a new revision
        // of it and set that instead on the new entity revision.
        $active_langcode = $entity->language()->getId();
        $target_storage = \Drupal::entityTypeManager()->getStorage($target_entity_type_id);
        if ($target_storage instanceof TranslatableRevisionableStorageInterface) {

          $items = $entity->get($field_name);
          $translation_items = NULL;
          if (!$new_revision->isDefaultTranslation() && $storage instanceof TranslatableRevisionableStorageInterface) {
            $translation_items = $items;
            $items = $storage->load($new_revision->id())->get($field_name);
          }

          $values = [];
          foreach ($items as $delta => $item) {
            // Use the item from the translation if it exists.
            // If we have translation items, use that if one with the matching
            // target id exists.
            if ($translation_items) {
              foreach ($translation_items as $translation_item) {
                if ($item->target_id == $translation_item->target_id) {
                  $item = $translation_item;
                  break;
                }
              }
            }

            /** @var \Drupal\Core\Entity\ContentEntityInterface $target_entity */
            $target_entity = $item->entity;
            if (!$target_entity->hasTranslation($active_langcode)) {
              $target_entity->addTranslation($active_langcode, $target_entity->toArray());
            }
            $target_entity = $item->entity->getTranslation($active_langcode);
            $revised_entity = $target_storage->createRevision($target_entity, $new_revision->isDefaultRevision(), $keep_untranslatable_fields);

            // Restore the revision ID.
            $revision_key = $revised_entity->getEntityType()->getKey('revision');
            $revised_entity->set($revision_key, $revised_entity->getLoadedRevisionId());
            $values[$delta] = $revised_entity;
          }
          $new_revision->set($field_name, $values);
        }
      }
    }
  }
}
